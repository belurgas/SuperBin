name: "publish"

on:
  push:
    branches:
      - master
      - dev

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-22.04, windows-latest]
        target: 
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - linux-x86_64
          - windows-x86_64
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-22.04
            target: linux-x86_64
          - os: windows-latest
            target: windows-x86_64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          yarn-version: v1.x

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: yarn install

      - name: Extract version from package.json
        id: get_version
        shell: pwsh
        if: matrix.os == 'windows-latest'
        run: |
          $version = node -p "require('./package.json').version"
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Extract version (Linux/macOS)
        id: get_version
        if: matrix.os != 'windows-latest'
        run: |
          echo "version=$(node -p 'require(\"./package.json\").version')" >> $GITHUB_OUTPUT

      - name: Build and publish Tauri app
        uses: tauri-apps/tauri-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v${{ steps.get_version.outputs.version }}
          releaseName: "App v${{ steps.get_version.outputs.version }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: "--target ${{ matrix.target }}"
